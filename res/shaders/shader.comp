#version 450

struct Vertex {
    vec3 pos;
    vec3 color;
    vec2 texCoord;
};

struct BlockUpdate {
    ivec2 chunkPos;
    uvec3 blockPos;
    uint blockID;
};

layout(std430, binding = 0) buffer BlockBuffer {
    uint voxelData[];
};

layout(std430, binding = 1) readonly buffer UpdateBuffer {
    BlockUpdate updates[];
};

layout(std430, binding = 2) buffer VertexBuffer {
    Vertex vertexData[];
};

layout(std430, binding = 3) buffer IndexBuffer {
    uint indexData[];
};

void main() {
    vertexData[0].pos = vec3(-0.5f, 0.5f, -0.5f);
    vertexData[0].color = vec3(0.9f, 0.9f, 0.9f);
    vertexData[0].texCoord = vec2(0.0f, 0.0f);

    vertexData[1].pos = vec3(0.5f, 0.5f, -0.5f);
    vertexData[1].color = vec3(0.9f, 0.9f, 0.9f);
    vertexData[1].texCoord = vec2(1.0f/16, 0.0f);

    vertexData[2].pos = vec3(0.5f, 0.5f, 0.5f);
    vertexData[2].color = vec3(0.9f, 0.9f, 0.9f);
    vertexData[2].texCoord = vec2(1.0f/16, 1.0f/16);

    vertexData[3].pos = vec3(-0.5f, 0.5f, 0.5f);
    vertexData[3].color = vec3(0.9f, 0.9f, 0.9f);
    vertexData[3].texCoord = vec2(0.0f, 1.0f/16);

    indexData[0] = 0;
    indexData[1] = 1;
    indexData[2] = 2;
    indexData[3] = 2;
    indexData[4] = 3;
    indexData[5] = 0;
}
