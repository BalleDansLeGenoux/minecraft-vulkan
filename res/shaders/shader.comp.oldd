#version 450

struct Vertex {
    vec3 pos;
    vec3 color;
    vec2 texCoord;
};

struct BlockUpdate {
    ivec2 chunkPos;
    uvec3 blockPos;
    uint blockID;
};

layout(std430, binding = 0) buffer BlockBuffer {
    uint voxelData[];
};

layout(std430, binding = 1) readonly buffer UpdateBuffer {
    BlockUpdate updates[];
};

layout(std430, binding = 2) buffer VertexBuffer {
    Vertex vertexData[];
};

layout(std430, binding = 3) buffer IndexBuffer {
    uint indexData[];
};

void main() {
    uint x = gl_GlobalInvocationID.x;
    uint y = gl_GlobalInvocationID.y;
    uint z = gl_GlobalInvocationID.z;

    int MAX = 65000;

    vertexData[0+20*x].pos = vec3(-0.5f+x, -0.5f+y, 0.5f+z);
    vertexData[0+20*x].color = vec3(0.9f, 0.9f, 0.9f);
    vertexData[0+20*x].texCoord = vec2(0.0f, 0.0f);

    vertexData[1+20*x].pos = vec3(0.5f+x, -0.5f+y, 0.5f+z);
    vertexData[1+20*x].color = vec3(0.9f, 0.9f, 0.9f);
    vertexData[1+20*x].texCoord = vec2(1.0f/16, 0.0f);

    vertexData[2+20*x].pos = vec3(0.5f+x, 0.5f+y, 0.5f+z);
    vertexData[2+20*x].color = vec3(0.9f, 0.9f, 0.9f);
    vertexData[2+20*x].texCoord = vec2(1.0f/16, 1.0f/16);

    vertexData[3+20*x].pos = vec3(-0.5f+x, 0.5f+y, 0.5f+z);
    vertexData[3+20*x].color = vec3(0.9f, 0.9f, 0.9f);
    vertexData[3+20*x].texCoord = vec2(0.0f, 1.0f/16);



    vertexData[4+20*x].pos = vec3(-0.5f+x, 0.5f+y, 0.5f+z);
    vertexData[4+20*x].color = vec3(1.0f, 0.0f, 0.0f); 
    vertexData[4+20*x].texCoord = vec2((1.0f/16)*3, 0.0f);

    vertexData[5+20*x].pos = vec3(0.5f+x, 0.5f+y, 0.5f+z);
    vertexData[5+20*x].color = vec3(0.0f, 1.0f, 0.0f); 
    vertexData[5+20*x].texCoord = vec2((1.0f/16)*4, 0.0f);

    vertexData[6+20*x].pos = vec3(0.5f+x, 0.5f+y, -0.5f+z);
    vertexData[6+20*x].color = vec3(0.0f, 0.0f, 1.0f); 
    vertexData[6+20*x].texCoord = vec2((1.0f/16)*4, 1.0f/16);

    vertexData[7+20*x].pos = vec3(-0.5f+x, 0.5f+y, -0.5f+z);
    vertexData[7+20*x].color = vec3(1.0f, 1.0f, 1.0f); 
    vertexData[7+20*x].texCoord = vec2((1.0f/16)*3, 1.0f/16);



    vertexData[8+20*x].pos = vec3(-0.5f+x, -0.5f+y, 0.5f+z);
    vertexData[8+20*x].color = vec3(1.0f, 0.0f, 0.0f); 
    vertexData[8+20*x].texCoord = vec2((1.0f/16)*3, 0.0f);

    vertexData[9+20*x].pos = vec3(-0.5f+x, 0.5f+y, 0.5f+z);
    vertexData[9+20*x].color = vec3(0.0f, 1.0f, 0.0f); 
    vertexData[9+20*x].texCoord = vec2((1.0f/16)*4, 0.0f);

    vertexData[10+20*x].pos = vec3(-0.5f+x, 0.5f+y, -0.5f+z);
    vertexData[10+20*x].color = vec3(0.0f, 0.0f, 1.0f); 
    vertexData[10+20*x].texCoord = vec2((1.0f/16)*4, 1.0f/16);

    vertexData[11+20*x].pos = vec3(-0.5f+x, -0.5f+y, -0.5f+z);
    vertexData[11+20*x].color = vec3(1.0f, 1.0f, 1.0f); 
    vertexData[11+20*x].texCoord = vec2((1.0f/16)*3, 1.0f/16);



    vertexData[12+20*x].pos = vec3(0.5f+x, 0.5f+y, 0.5f+z);
    vertexData[12+20*x].color = vec3(1.0f, 0.0f, 0.0f); 
    vertexData[12+20*x].texCoord = vec2((1.0f/16)*3, 0.0f);

    vertexData[13+20*x].pos = vec3(0.5f+x, -0.5f+y, 0.5f+z);
    vertexData[13+20*x].color = vec3(0.0f, 1.0f, 0.0f); 
    vertexData[13+20*x].texCoord = vec2((1.0f/16)*4, 0.0f);

    vertexData[14+20*x].pos = vec3(0.5f+x, -0.5f+y, -0.5f+z);
    vertexData[14+20*x].color = vec3(0.0f, 0.0f, 1.0f); 
    vertexData[14+20*x].texCoord = vec2((1.0f/16)*4, 1.0f/16);

    vertexData[15+20*x].pos = vec3(0.5f+x, 0.5f+y, -0.5f+z);
    vertexData[15+20*x].color = vec3(1.0f, 1.0f, 1.0f); 
    vertexData[15+20*x].texCoord = vec2((1.0f/16)*3, 1.0f/16);



    vertexData[16+20*x].pos = vec3(0.5f+x, -0.5f+y, 0.5f+z);
    vertexData[16+20*x].color = vec3(1.0f, 0.0f, 0.0f); 
    vertexData[16+20*x].texCoord = vec2((1.0f/16)*3, 0.0f);

    vertexData[17+20*x].pos = vec3(-0.5f+x, -0.5f+y, 0.5f+z);
    vertexData[17+20*x].color = vec3(0.0f, 1.0f, 0.0f); 
    vertexData[17+20*x].texCoord = vec2((1.0f/16)*4, 0.0f);

    vertexData[18+20*x].pos = vec3(-0.5f+x, -0.5f+y, -0.5f+z);
    vertexData[18+20*x].color = vec3(0.0f, 0.0f, 1.0f); 
    vertexData[18+20*x].texCoord = vec2((1.0f/16)*4, 1.0f/16);

    vertexData[19+20*x].pos = vec3(0.5f+x, -0.5f+y, -0.5f+z);
    vertexData[19+20*x].color = vec3(1.0f, 1.0f, 1.0f); 
    vertexData[19+20*x].texCoord = vec2((1.0f/16)*3, 1.0f/16);

    indexData[0+30*x] = 0+20*x;
    indexData[1+30*x] = 1+20*x;
    indexData[2+30*x] = 2+20*x;
    indexData[3+30*x] = 2+20*x;
    indexData[4+30*x] = 3+20*x;
    indexData[5+30*x] = 0+20*x;
    
    indexData[6+30*x] = 4+20*x;
    indexData[7+30*x] = 5+20*x;
    indexData[8+30*x] = 6+20*x;
    indexData[9+30*x] = 6+20*x;
    indexData[10+30*x] = 7+20*x;
    indexData[11+30*x] = 4+20*x;
    indexData[12+30*x] = 8+20*x;
    indexData[13+30*x] = 9+20*x;
    indexData[14+30*x] = 10+20*x;
    indexData[15+30*x] = 10+20*x;
    indexData[16+30*x] = 11+20*x;
    indexData[17+30*x] = 8+20*x;
    indexData[18+30*x] = 12+20*x;
    indexData[19+30*x] = 13+20*x;
    indexData[20+30*x] = 14+20*x;
    indexData[21+30*x] = 14+20*x;
    indexData[22+30*x] = 15+20*x;
    indexData[23+30*x] = 12+20*x;
    indexData[24+30*x] = 16+20*x;
    indexData[25+30*x] = 17+20*x;
    indexData[26+30*x] = 18+20*x;
    indexData[27+30*x] = 18+20*x;
    indexData[28+30*x] = 19+20*x;
    indexData[29+30*x] = 16+20*x;

}
