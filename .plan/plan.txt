🎯 Plan en étapes progressives
Au lieu de viser un Minecraft complet dès le début, je te propose un chemin progressif :

🔹 Phase 1 : Apprendre Vulkan et afficher un simple cube
    ✅ Objectif → Juste afficher un cube en Vulkan.
    👉 Apprendre les bases de Vulkan : swapchain, pipeline, shaders, buffers, etc.

🔹 Phase 2 : Affichage d'un terrain voxel simple (sans chunks)
    ✅ Objectif → Afficher une grille de cubes (ex: 16x16x16).
    👉 Générer un premier mesh de voxels sans optimisation.

🔹 Phase 3 : Gestion des chunks et meshing optimisé
    ✅ Objectif → Diviser le monde en chunks (16x16x256).
    👉 Générer le mesh d'un chunk entier en enlevant les faces cachées.
    👉 Greedy Meshing pour optimiser le nombre de triangles.

🔹 Phase 4 : Caméra FPS et interactions
    ✅ Objectif → Bouger la caméra et casser/placer des blocs.
    👉 Implémenter un raycast pour détecter les blocs sous le curseur.

🔹 Phase 5 : Textures et amélioration graphique
    ✅ Objectif → Charger un atlas de textures et gérer le rendu.
    👉 Appliquer un sampler nearest pour éviter le flou.
    👉 Désactiver les mipmaps si pixel art.

🔹 Phase 6 : Performances et Compute Shaders
    ✅ Objectif → Optimiser le moteur pour éviter le lag.
    👉 Compute Shader pour le meshing des chunks.
    👉 Frustum culling pour ne rendre que les chunks visibles.

🔹 Phase 7 : Lumière et ambiance
    ✅ Objectif → Ajouter de la lumière dynamique.
    👉 Propagation de lumière type Minecraft (flood-fill).
    👉 Ombres améliorées avec voxel raytracing si envie.

🔹 Phase 8 : Génération procédurale de monde
    ✅ Objectif → Générer un terrain infini avec Perlin Noise.
    👉 Multithreading pour charger les chunks dynamiquement.    

🔹 Phase 9 : Gameplay avancé
    ✅ Objectif → Ajouter l’UI, l’inventaire, la physique, etc.
    👉 Ajouter un petit mode créatif pour placer des blocs librement.